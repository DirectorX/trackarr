###
# Stages
###

stages:
  - vendor
  - test
  - build-web
  - build
  - build-image


###
# Variables
###

variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_HOST: "tcp://docker:2376"
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  DOCKER_CLI_EXPERIMENTAL: "enabled"

###
# Anchors
###

# Cache
.cache_vendor_key: &cache_vendor_key
  key:
    files:
      - go.mod
      - go.sum
    prefix: vendor

.cache_vendor: &cache_vendor
  cache:
    <<: *cache_vendor_key
    policy: pull-push
    paths: &cache_vendor_path
      - vendor/

.cache_vendor_pull: &cache_vendor_pull
  cache:
    <<: *cache_vendor_key
    policy: pull
    paths: *cache_vendor_path

# Only/Except
.only-default: &only-default
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "develop"
    # Allow external MRs
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
    # Internal MRs run on branch
    - if: $CI_MERGE_REQUEST_ID
      when: never

.only_master: &only_master
  only:
    - master
  except:
    - tags

.only_develop: &only_develop
  only:
    - develop
  except:
    - tags

.only_branches: &only_branches
  only:
    - branches
  except:
    - master
    - develop
    - tags

.only_master_tag: &only_master_tag
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+$/
  except:
    - branches

.only_develop_tag: &only_develop_tag
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+-dev$/
  except:
    - branches

# Docker
.docker_build_push: &docker_build_push |-
  # AMD64
  docker build --pull --platform "linux/amd64" -f build/Dockerfile --build-arg="ARCH=amd64" -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-amd64" .
  docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-amd64"
  # ARM64
  docker build --pull --platform "linux/arm64" -f build/Dockerfile --build-arg="ARCH=arm64" -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-arm64" .
  docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-arm64"
  # ARMV7
  docker build --pull --platform "linux/arm/v7" -f build/Dockerfile --build-arg="ARCH=arm_7" -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-armv7" .
  docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-armv7"
  # Manifest
  docker manifest create "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-amd64" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-arm64" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-armv7"
  docker manifest push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

###
# Jobs
###

# Vendor
vendor:
  stage: vendor
  image: golang:1.14-alpine
  script:
    - apk add --no-cache make git
    - make vendor
  <<: *cache_vendor
  <<: *only-default

# Test
test:test:
  stage: test
  image: golang:1.14-buster
  script:
    - make test
  <<: *cache_vendor_pull
  <<: *only-default

# Lint
test:lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
    - make lint
  <<: *cache_vendor_pull
  <<: *only-default

# Build web
build-web:web:
  stage: build-web
  needs:
    - "test:test"
    - "test:lint"
  image: node:12-alpine
  script:
    - apk add --no-cache make
    - make web
  cache:
    key: vendor-web
    policy: pull-push
    paths:
      - web/trackarr-ui/node_modules
  artifacts:
    name: web_${CI_COMMIT_SHORT_SHA}
    paths:
      - web/trackarr-ui/dist/
  <<: *only-default

# Build binary template
.build-binary:
  stage: build
  needs:
    - "build-web:web"
  dependencies:
    - build-web:web
  image: golang:1.14-alpine
  before_script:
    # Install dependencies
    - apk add --no-cache make git curl
    - go get github.com/GeertJohan/go.rice/rice
    - curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | BINDIR=/usr/local/bin/ sh
  script:
    # Run goreleaser
    - make snapshot SKIP_WEB=true
  <<: *cache_vendor_pull
  artifacts:
    name: build_${CI_COMMIT_SHORT_SHA}
    paths:
      - dist/

# Master release
build:master-publish:
  extends: .build-binary
  script:
    - make publish SKIP_WEB=true
  <<: *only_master_tag

# Master build
build:master:
  extends: .build-binary
  <<: *only_master

# Develop release
build:develop-publish:
  extends: .build-binary
  script:
    - make publish SKIP_WEB=true
  <<: *only_develop_tag

# Develop build
build:develop:
  extends: .build-binary
  <<: *only_develop

build:branch:
  extends: .build-binary
  <<: *only-default

# Build image template
.build-image:
  stage: build-image
  image: docker:stable
  services:
    - name: docker:stable-dind
      command: ["--experimental"]
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

build-image:master-publish:
  extends: .build-image
  dependencies:
    - build:master-publish
  script:
    - *docker_build_push
    - |-
      # Tag version from git tag
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      # Tag latest
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:latest"
      docker push "${CI_REGISTRY_IMAGE}:latest"
  <<: *only_master_tag

build-image:master:
  extends: .build-image
  dependencies:
    - build:master
  script:
    - *docker_build_push
    - |-
      # Tag branch
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
      docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
  <<: *only_master

build-image:develop-publish:
  extends: .build-image
  dependencies:
    - build:develop-publish
  script:
    - *docker_build_push
    - |-
      # Tag version from git tag
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      # Tag latest-dev
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:latest-dev"
      docker push "${CI_REGISTRY_IMAGE}:latest-dev"
  <<: *only_develop_tag

build-image:develop:
  extends: .build-image
  dependencies:
    - build:develop
  script:
    - *docker_build_push
    - |-
      # Tag branch
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
      docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
  <<: *only_develop

build-image:branch:
  extends: .build-image
  dependencies:
    - build:branch
  script:
    - *docker_build_push
  <<: *only_branches
  when: manual
