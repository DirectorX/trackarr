# Stages
stages:
  - vendor
  - test
  - build-web
  - build
  - build-image

# Vendor
vendor:
  stage: vendor
  image: golang:1.13-alpine
  script:
    - apk add --no-cache make
    - make vendor
  cache:
    key: vendor
    policy: pull-push
    paths:
      - vendor/

# Test
test:test:
  stage: test
  image: golang:1.13-buster
  script:
    - make test
  cache:
    key: vendor
    policy: pull
    paths:
      - vendor/

# Lint
test:lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
    - make lint
  cache:
    key: vendor
    policy: pull
    paths:
      - vendor/

# Build web
build-web:web:
  stage: build-web
  image: node:12-alpine
  script:
    - apk add --no-cache make
    - make web
  artifacts:
    name: web_${CI_COMMIT_SHORT_SHA}
    paths:
      - web/trackarr-ui/dist/

# Build binary template
.build-binary:
  stage: build
  dependencies:
    - build-web:web
  image: golang:1.13-alpine
  before_script:
    # Install dependencies
    - apk add --no-cache make git curl
    - go get github.com/GeertJohan/go.rice/rice
    - curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | BINDIR=/usr/local/bin/ sh
  script:
    # Run goreleaser
    - make snapshot
  artifacts:
    name: build_${CI_COMMIT_SHORT_SHA}
    paths:
      - dist/
  cache:
    key: vendor
    policy: pull
    paths:
      - vendor/

build:master:
  extends: .build-binary
  script:
    - if [ -z "${CI_COMMIT_TAG}" ]; then
        make release SKIP_WEB=true
      else
        make publish SKIP_WEB=true
      fi
  only:
    - master
    - tags

build:develop:
  extends: .build-binary
  script:
    - make snapshot SKIP_WEB=true
  only:
    - develop

build:branch:
  extends: .build-binary
  script:
    - make snapshot SKIP_WEB=true
  except:
    - master
    - develop
    - tags
  when: manual

# Build image template
.build-image:
  stage: build-image
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    TAG: null
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
    - docker build --pull --build-arg=VERSION=${VERSION} -f build/Dockerfile -t "${CI_REGISTRY_IMAGE}:${TAG}" .
  script:
    - docker push "${CI_REGISTRY_IMAGE}:${TAG}"

build-image:master:
  extends: .build-image
  dependencies:
    - build:master
  variables:
    TAG: "${CI_COMMIT_REF_NAME}"
  script:
    - docker push "${CI_REGISTRY_IMAGE}:${TAG}"
    - docker tag "${CI_REGISTRY_IMAGE}:${TAG}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - if [ -z "${CI_COMMIT_TAG}" ]; then
        docker tag "${CI_REGISTRY_IMAGE}:${TAG}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      fi
  only:
    - master
    - tags

build-image:develop:
  extends: .build-image
  dependencies:
    - build:develop
  variables:
    TAG: "${CI_COMMIT_REF_NAME}"
  script:
    - docker push "${CI_REGISTRY_IMAGE}:${TAG}"
    - docker tag "${CI_REGISTRY_IMAGE}:${TAG}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  only:
    - develop

build-image:branch:
  extends: .build-image
  dependencies:
    - build:branch
  variables:
    TAG: "${CI_COMMIT_SHORT_SHA}"
  except:
    - master
    - develop
    - tags
